# https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#cis-1.1-remediation
# https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#cis-3.3-remediation
#
# 1.1 – Avoid the use of the "root" account
# 3.3 – Ensure a log metric filter and alarm exist for usage of "root" account
use-of-root-account-count:
  metric_name: "UseOfRootAccountCount"
  filter_pattern:
    '{$.userIdentity.type="Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType !="AwsServiceEvent"}'
  metric_namespace: "CISBenchmark"
  alarm_description: "Alarms when root credenitals are used."
  metric_value: "1"
  alarm_name: "RootAccountUsed"
  alarm_comparison_operator: "GreaterThanOrEqualToThreshold"
  alarm_evaluation_periods: "1"
  alarm_period: "86400"
  alarm_statistic: "Sum"
  alarm_treat_missing_data: "notBreaching"
  alarm_threshold: "1"

# https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-3.8
# 3.1 – Ensure a log metric filter and alarm exist for unauthorized API calls
authorization-failure-count:
  metric_name: "AuthorizationFailureCount"
  filter_pattern: '{($.errorCode = "*UnauthorizedOperation") || ($.errorCode = "AccessDenied*")}'
  metric_namespace: "CISBenchmark"
  alarm_description: "Alarms when an unauthorized API call is made."
  metric_value: "1"
  alarm_name: "AuthorizationFailureThresholdExceeded"
  alarm_comparison_operator: "GreaterThanOrEqualToThreshold"
  alarm_evaluation_periods: "1"
  alarm_period: "300"
  alarm_statistic: "Sum"
  alarm_treat_missing_data: "notBreaching"
  alarm_threshold: "1"

# 3.2 – Ensure a log metric filter and alarm exist for AWS Management Console sign-in without MFA
console-signin-without-mfa-count:
  metric_name: "ConsoleSignInWithoutMfaCount"
  filter_pattern: '{ ($.eventName = "ConsoleLogin") && ($.additionalEventData.MFAUsed != "Yes") }'
  metric_namespace: "CISBenchmark"
  alarm_description: "Alarms when a user logs into the console without MFA."
  metric_value: "1"
  alarm_name: "SignedIntoConsoleWithoutMFA"
  alarm_comparison_operator: "GreaterThanOrEqualToThreshold"
  alarm_evaluation_periods: "1"
  alarm_period: "86400"
  alarm_statistic: "Sum"
  alarm_treat_missing_data: "notBreaching"
  alarm_threshold: "1"

#3.4 – Ensure a log metric filter and alarm exist for IAM policy changes
iam-policy-event-count:
  metric_name: "IAMPolicyEventCount"
  filter_pattern:
    "{ ($.eventName = DeleteGroupPolicy) || ($.eventName = DeleteRolePolicy)
    ||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}"
  metric_namespace: "CISBenchmark"
  alarm_description: "Alarms when an API call is made to change an IAM policy."
  alarm_threshold: "3"
  metric_value: "1"
  alarm_name: "IAMPolicyChanged"
  alarm_comparison_operator: "GreaterThanOrEqualToThreshold"
  alarm_evaluation_periods: "1"
  alarm_period: "300"
  alarm_statistic: "Sum"
  alarm_treat_missing_data: "notBreaching"

#3.5 – Ensure a log metric filter and alarm exist for CloudTrail configuration changes
cloud-trail-event-count:
  metric_name: "CloudTrailEventCount"
  filter_pattern:
    "{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName =
    StartLogging) || ($.eventName = StopLogging) }"
  metric_namespace: "CISBenchmark"
  alarm_description:
    "Alarms when an API call is made to create, update or delete a .cloudtrail. trail, or to start or stop logging to a
    trail."
  metric_value: "1"
  alarm_name: "CloudTrailModified"
  alarm_comparison_operator: "GreaterThanOrEqualToThreshold"
  alarm_evaluation_periods: "1"
  alarm_period: "300"
  alarm_statistic: "Sum"
  alarm_treat_missing_data: "notBreaching"
  alarm_threshold: "1"

#3.6 – Ensure a log metric filter and alarm exist for AWS Management Console authentication failures
console-sign-in-failure-count:
  metric_name: "ConsoleSignInFailureCount"
  filter_pattern: '{ ($.eventName = ConsoleLogin) && ($.errorMessage = "Failed authentication") }'
  metric_namespace: "CISBenchmark"
  alarm_name: "UnauthenticatedApiCallForConsoleLogin"
  alarm_description: "Alarms when an unauthenticated API call is made to sign into the console."
  alarm_threshold: "3"
  metric_value: "1"
  alarm_comparison_operator: "GreaterThanOrEqualToThreshold"
  alarm_evaluation_periods: "1"
  alarm_period: "300"
  alarm_statistic: "Sum"
  alarm_treat_missing_data: "notBreaching"

#3.7 – Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs
kms-key-pending-deletion-error-count:
  metric_name: "KMSKeyPendingDeletionErrorCount"
  filter_pattern:
    "{($.eventSource = kms.amazonaws.com) && (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))}"
  metric_namespace: "CISBenchmark"
  alarm_description: "Alarms when a customer created KMS key is pending deletion."
  metric_value: "1"
  alarm_name: "KMSKeyDeleted"
  alarm_comparison_operator: "GreaterThanOrEqualToThreshold"
  alarm_evaluation_periods: "1"
  alarm_period: "300"
  alarm_statistic: "Sum"
  alarm_treat_missing_data: "notBreaching"
  alarm_threshold: "1"

#3.8 – Ensure a log metric filter and alarm exist for S3 bucket policy changes
s3-bucket-policy-event-count:
  metric_name: "S3BucketPolicyEventCount"
  filter_pattern:
    "{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) ||
    ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) ||
    ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) ||
    ($.eventName = DeleteBucketReplication)) }"
  metric_namespace: "CISBenchmark"
  alarm_description:
    "Alarms when an API call is made to S3 to put or delete a Bucket Lifecycle Policy, Bucket Policy or Bucket ACL."
  metric_value: "1"
  alarm_name: "S3BucketPolicyOrACLModified"
  alarm_comparison_operator: "GreaterThanOrEqualToThreshold"
  alarm_evaluation_periods: "1"
  alarm_period: "300"
  alarm_statistic: "Sum"
  alarm_treat_missing_data: "notBreaching"
  alarm_threshold: "1"

#3.9 – Ensure a log metric filter and alarm exist for AWS Config configuration changes
aws-config-change-count:
  metric_name: "AWSConfigChangeCount"
  filter_pattern:
    "{($.eventSource = config.amazonaws.com) &&
    (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.eventName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}"
  metric_namespace: "CISBenchmark"
  alarm_name: "AWSConfigConfigurationModified"
  alarm_description: "Alarms when AWS Config changes."
  metric_value: "1"
  alarm_comparison_operator: "GreaterThanOrEqualToThreshold"
  alarm_evaluation_periods: "1"
  alarm_period: "300"
  alarm_statistic: "Sum"
  alarm_treat_missing_data: "notBreaching"
  alarm_threshold: "1"

#3.10 – Ensure a log metric filter and alarm exist for security group changes
security-group-event-count:
  metric_name: "SecurityGroupEventCount"
  filter_pattern:
    "{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName =
    RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) ||
    ($.eventName = DeleteSecurityGroup) }"
  metric_namespace: "CISBenchmark"
  alarm_description: "Alarms when an API call is made to create, update or delete a Security Group."
  metric_value: "1"
  alarm_name: "SecurityGroupModified"
  alarm_comparison_operator: "GreaterThanOrEqualToThreshold"
  alarm_evaluation_periods: "1"
  alarm_period: "300"
  alarm_statistic: "Sum"
  alarm_treat_missing_data: "notBreaching"
  alarm_threshold: "1"

#3.11 – Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL)
network-acl-event-count:
  metric_name: "NetworkAclEventCount"
  filter_pattern:
    "{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) ||
    ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName =
    ReplaceNetworkAclAssociation) }"
  metric_namespace: "CISBenchmark"
  alarm_description: "Alarms when an API call is made to create, update or delete a Network ACL."
  metric_value: "1"
  alarm_name: "NetworkACLModified"
  alarm_comparison_operator: "GreaterThanOrEqualToThreshold"
  alarm_evaluation_periods: "1"
  alarm_period: "300"
  alarm_statistic: "Sum"
  alarm_treat_missing_data: "notBreaching"
  alarm_threshold: "1"

#3.12 – Ensure a log metric filter and alarm exist for changes to network gateways
gateway-event-count:
  metric_name: "GatewayEventCount"
  filter_pattern:
    "{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName =
    AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) ||
    ($.eventName = DetachInternetGateway) }"
  metric_namespace: "CISBenchmark"
  alarm_description: "Alarms when an API call is made to create, update or delete a Customer or Internet Gateway."
  metric_value: "1"
  alarm_name: "CustomerOrInternetGatwayModified"
  alarm_comparison_operator: "GreaterThanOrEqualToThreshold"
  alarm_evaluation_periods: "1"
  alarm_period: "300"
  alarm_statistic: "Sum"
  alarm_treat_missing_data: "notBreaching"
  alarm_threshold: "1"

#3.13 – Ensure a log metric filter and alarm exist for route table changes
route-table-changes-count:
  metric_name: "RouteTableChangesCount"
  filter_pattern:
    "{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName =
    ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName =
    DisassociateRouteTable) }"
  metric_namespace: "CISBenchmark"
  alarm_description: "Alarms when route table changes are detected."
  metric_value: "1"
  alarm_name: "RouteTableModified"
  alarm_comparison_operator: "GreaterThanOrEqualToThreshold"
  alarm_evaluation_periods: "1"
  alarm_period: "300"
  alarm_statistic: "Sum"
  alarm_treat_missing_data: "notBreaching"
  alarm_threshold: "1"

#3.14 – Ensure a log metric filter and alarm exist for VPC changes
vpc-event-count:
  metric_name: "VpcEventCount"
  filter_pattern:
    "{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName =
    AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName =
    DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) ||
    ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName =
    EnableVpcClassicLink) }"
  metric_namespace: "CISBenchmark"
  alarm_description:
    "Alarms when an API call is made to create, update or delete a VPC, VPC peering connection or VPC connection to
    classic."
  metric_value: "1"
  alarm_name: "VPCOrVPCPeeringModified"
  alarm_comparison_operator: "GreaterThanOrEqualToThreshold"
  alarm_evaluation_periods: "1"
  alarm_period: "300"
  alarm_statistic: "Sum"
  alarm_treat_missing_data: "notBreaching"
  alarm_threshold: "1"
